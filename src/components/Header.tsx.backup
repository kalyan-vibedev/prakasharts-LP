import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Menu, X, ChevronDown, Phone, Mail, MapPin, ArrowRight, Star, Users, TrendingUp, Award, Globe, Zap } from 'lucide-react';

interface HeaderProps {
  currentPage: string;
  setCurrentPage: (page: string) => void;
}

const Header: React.FC<HeaderProps> = ({ currentPage, setCurrentPage }) => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);

  const navItems = [
    { 
      name: 'Home', 
      path: 'home',
      icon: Star,
      subItems: [
        { name: 'Numbers That Speak Excellence', path: 'home', section: 'excellence' },
        { name: 'Why Choose Prakash Arts?', path: 'home', section: 'why-choose' }
      ]
    },
    { 
      name: 'About', 
      path: 'about',
      icon: Users,
      subItems: [
        { name: 'Our Legacy Story', path: 'about', section: 'legacy' },
        { name: 'Our Journey', path: 'about', section: 'journey' },
        { name: 'Our Achievements', path: 'about', section: 'achievements' },
        { name: 'Our Values', path: 'about', section: 'values' }
      ]
    },
    { 
      name: 'Services', 
      path: 'services',
      icon: TrendingUp,
      subItems: [
        { name: 'Why Choose Our Services?', path: 'services', section: 'why-services' },
        { name: 'Static Media Solutions', path: 'services', section: 'static-media' },
        { name: 'Transit Media Solutions', path: 'services', section: 'transit-media' },
        { name: 'Digital DOOH Solutions', path: 'services', section: 'digital-dooh' }
      ]
    },
    { 
      name: 'Clients', 
      path: 'clients',
      icon: Award,
      subItems: [
        { name: 'Trusted by Leading Brands', path: 'clients', section: 'leading-brands' },
        { name: 'Our Valued Clients', path: 'clients', section: 'valued-clients' },
        { name: 'Featured Campaigns', path: 'clients', section: 'featured-campaigns' }
      ]
    },
    { 
      name: 'Contact', 
      path: 'contact',
      icon: Phone,
      subItems: [
        { name: 'Office Locations', path: 'contact', section: 'locations' },
        { name: 'Request Quote', path: 'contact', section: 'quote' },
        { name: 'Support', path: 'contact', section: 'support' }
      ]
    }
  ];

  const handleNavClick = (path: string, section?: string) => {
    setCurrentPage(path);
    setIsMenuOpen(false);
    setActiveDropdown(null);
    
    // Update URL hash for direct access
    window.location.hash = path;
    
    // Scroll to top when navigating to a new page
    window.scrollTo({ top: 0, behavior: 'smooth' });
    
    // If section is specified, scroll to that section after a short delay
    if (section) {
      setTimeout(() => {
        const element = document.getElementById(section);
        if (element) {
          element.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }, 500);
    }
  };

  const handleMenuButtonClick = (item: any) => {
    // Navigate to the page top when clicking the main menu button
    handleNavClick(item.path);
  };

  const handleDropdownToggle = (itemName: string) => {
    setActiveDropdown(activeDropdown === itemName ? null : itemName);
  };

  const handleMouseEnter = (itemName: string) => {
    if (window.innerWidth >= 1024) { // Only on desktop
      setActiveDropdown(itemName);
    }
  };

  const handleMouseLeave = () => {
    if (window.innerWidth >= 1024) { // Only on desktop
      setActiveDropdown(null);
    }
  };

  return (
    <header className="fixed top-0 left-0 right-0 z-50 bg-white/95 backdrop-blur-md border-b border-gray-200 shadow-lg">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-20">
          {/* Logo */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="flex items-center"
          >
            <img
              src="https://res.cloudinary.com/djeecujk0/image/upload/v1753992404/company-logo_uv24ml.png"
              alt="Prakash Arts Logo"
              className="h-14 w-auto transition-transform duration-300 hover:scale-105 cursor-pointer"
              onClick={() => handleNavClick('home')}
              onError={(e) => {
                console.log('Logo failed to load');
                e.currentTarget.style.display = 'none';
              }}
            />
          </motion.div>

          {/* Desktop Navigation */}
          <nav className="hidden lg:flex items-center space-x-1">
            {navItems.map((item) => (
              <div 
                key={item.path} 
                className="relative group"
                onMouseEnter={() => handleMouseEnter(item.name)}
                onMouseLeave={handleMouseLeave}
              >
                <motion.button
                  onClick={() => handleMenuButtonClick(item)}
                  className={`relative px-6 py-3 text-sm font-semibold transition-all duration-300 rounded-lg flex items-center space-x-2 ${
                    currentPage === item.path
                      ? 'text-blue-600 bg-blue-50 shadow-md'
                      : 'text-gray-800 hover:text-blue-600 hover:bg-blue-50'
                  }`}
                  whileHover={{ scale: 1.02, y: -1 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <item.icon className="h-4 w-4" />
                  <span>{item.name}</span>
                  {item.subItems && (
                    <ChevronDown className={`h-4 w-4 transition-transform duration-300 ${
                      activeDropdown === item.name ? 'rotate-180' : ''
                    }`} />
                  )}
                </motion.button>

                {/* Professional Corporate Dropdown */}
                {item.subItems && (
                  <AnimatePresence>
                    {activeDropdown === item.name && (
                      <motion.div
                        initial={{ opacity: 0, y: -8 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: -8 }}
                        transition={{ duration: 0.2 }}
                        className="absolute top-full left-0 mt-1 w-72 rounded-xl shadow-2xl border border-gray-200/50 z-50"
                        style={{
                          backgroundColor: 'rgba(255, 255, 255, 0.85)',
                          backdropFilter: 'blur(6px)',
                          WebkitBackdropFilter: 'blur(6px)'
                        }}
                      >
                        {item.subItems.map((subItem, index) => (
                          <motion.button
                            key={index}
                            onClick={() => handleNavClick(subItem.path, subItem.section)}
                            className="w-full text-left px-6 py-4 text-gray-800 font-semibold hover:text-blue-600 transition-colors duration-200 ease-in"
                            initial={{ opacity: 0, x: -5 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ delay: index * 0.02, duration: 0.2 }}
                            onKeyDown={(e) => {
                              if (e.key === 'Enter' || e.key === ' ') {
                                e.preventDefault();
                                handleNavClick(subItem.path, subItem.section);
                              }
                            }}
                            tabIndex={0}
                          >
                            {subItem.name}
                          </motion.button>
                        ))}
                      </motion.div>
                    )}
                  </AnimatePresence>
                )}

                {currentPage === item.path && (
                  <motion.div
                    layoutId="activeTab"
                    className="absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full"
                    initial={false}
                    transition={{ type: "spring", stiffness: 300, damping: 30 }}
                  />
                )}
              </div>
            ))}
          </nav>

          {/* CTA Button */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
            className="hidden md:block"
          >
            <motion.button
              onClick={() => handleNavClick('contact')}
              className="bg-gradient-to-r from-blue-600 to-cyan-600 text-white px-8 py-3 rounded-full font-semibold hover:from-blue-700 hover:to-cyan-700 transition-all duration-300 shadow-lg hover:shadow-xl hover:shadow-blue-500/25 flex items-center space-x-2"
              whileHover={{ scale: 1.05, y: -2 }}
              whileTap={{ scale: 0.95 }}
            >
              <Phone className="h-4 w-4" />
              <span>Get Quote</span>
            </motion.button>
          </motion.div>

          {/* Mobile Menu Button */}
          <motion.button
            onClick={() => setIsMenuOpen(!isMenuOpen)}
            className="lg:hidden p-3 rounded-xl hover:bg-gray-100 transition-all duration-300"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            {isMenuOpen ? (
              <X className="h-6 w-6 text-gray-700" />
            ) : (
              <Menu className="h-6 w-6 text-gray-700" />
            )}
          </motion.button>
        </div>

        {/* Mobile Navigation */}
        <AnimatePresence>
          {isMenuOpen && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
              className="lg:hidden border-t border-gray-200 bg-white/95 backdrop-blur-md"
            >
              <div className="py-6 space-y-2">
                {navItems.map((item) => (
                  <div key={item.path}>
                    <motion.button
                      onClick={() => item.subItems ? handleDropdownToggle(item.name) : handleNavClick(item.path)}
                      className={`block w-full text-left px-6 py-4 text-base font-semibold transition-all duration-300 rounded-xl flex items-center justify-between ${
                        currentPage === item.path
                          ? 'text-blue-600 bg-gradient-to-r from-blue-50 to-cyan-50 shadow-md'
                          : 'text-gray-800 hover:text-blue-600 hover:bg-gray-50'
                      }`}
                      whileHover={{ x: 8 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <div className="flex items-center space-x-3">
                        <item.icon className="h-5 w-5" />
                        <span>{item.name}</span>
                      </div>
                      {item.subItems && (
                        <ChevronDown className={`h-4 w-4 transition-transform duration-300 ${
                          activeDropdown === item.name ? 'rotate-180' : ''
                        }`} />
                      )}
                    </motion.button>

                    {/* Mobile Accordion Dropdown */}
                    {item.subItems && (
                      <AnimatePresence>
                        {activeDropdown === item.name && (
                          <motion.div
                            initial={{ opacity: 0, height: 0 }}
                            animate={{ opacity: 1, height: 'auto' }}
                            exit={{ opacity: 0, height: 0 }}
                            transition={{ duration: 0.2 }}
                            className="ml-6 mt-2 space-y-1 rounded-lg p-3"
                            style={{
                              backgroundColor: 'rgba(255, 255, 255, 0.85)',
                              backdropFilter: 'blur(6px)',
                              WebkitBackdropFilter: 'blur(6px)'
                            }}
                          >
                            {item.subItems.map((subItem, index) => (
                              <motion.button
                                key={index}
                                onClick={() => handleNavClick(subItem.path, subItem.section)}
                                className="block w-full text-left px-4 py-3 text-sm font-semibold text-gray-800 hover:text-blue-600 rounded-lg transition-colors duration-200 ease-in"
                                whileHover={{ x: 4 }}
                                initial={{ opacity: 0, x: -10 }}
                                animate={{ opacity: 1, x: 0 }}
                                transition={{ delay: index * 0.05 }}
                              >
                                {subItem.name}
                              </motion.button>
                            ))}
                          </motion.div>
                        )}
                      </AnimatePresence>
                    )}
                  </div>
                ))}
                <motion.button
                  onClick={() => handleNavClick('contact')}
                  className="block w-full text-left px-6 py-4 bg-gradient-to-r from-blue-600 to-cyan-600 text-white font-semibold rounded-xl hover:from-blue-700 hover:to-cyan-700 transition-all duration-300 shadow-lg flex items-center space-x-3"
                  whileHover={{ x: 8 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <Phone className="h-5 w-5" />
                  <span>Get Quote</span>
                </motion.button>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </header>
  );
};

export default Header;